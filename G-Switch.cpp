#include<fstream.h>   //(cout,cin,ifstream,ofstream)
#include<conio.h>     //(getch,kbhit)
#include<graphics.h>  //(rectangle,putpixel,arc,cleardevice,getpixel etc)
#include<dos.h>       //(delay)
#include<process.h>   //(exit)
#include<iomanip.h>   //(setw)
#include<stdio.h>     //(gets)

//Global Variables
int pos_x=308,pos_y=216;									//Tracks position of character
int grid=0;													//Tracks frame of level
int level_position=0;										//Tracks position of screen in level
float speed=5.0;											//Tracks delay duration b/w 2 framses

//Character Sprites
int man_menu[24][24]=
 {
  { 0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,1,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,1,2,2,1,3,3,3,1,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,1,1,1,1,3,3,3,3,3,1,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,1,3,2,2,1,3,3,3,3,3,1,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,1,3,1,1,3,3,3,3,3,3,2,1,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,1,4,3,3,4,4,4,4,3,3,2,1,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,1,4,1,4,1,1,4,4,4,3,2,1,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,1,4,1,4,1,1,4,4,4,3,1,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,1,4,4,4,4,4,4,4,4,3,1,1,0,0,0,0,0,0,0 },
  { 0,0,0,0,1,1,1,4,1,1,1,1,4,3,1,2,2,1,1,0,0,0,0,0 },
  { 0,0,0,1,3,2,2,1,4,4,4,4,4,1,2,2,2,2,3,1,0,0,0,0 },
  { 0,0,0,1,3,3,2,2,1,1,1,1,1,2,2,2,2,3,3,1,0,0,0,0 },
  { 0,0,1,3,3,3,2,1,2,2,2,2,2,2,2,1,2,3,3,3,1,0,0,0 },
  { 0,0,1,3,3,1,1,1,2,2,2,2,2,2,2,1,1,1,3,3,1,0,0,0 },
  { 0,0,1,3,3,3,1,1,2,2,2,2,2,2,2,1,1,3,3,3,1,0,0,0 },
  { 0,0,1,3,3,3,1,1,3,3,3,3,3,3,3,1,1,3,3,3,1,0,0,0 },
  { 0,0,0,1,1,1,2,1,3,3,3,3,3,3,3,1,0,1,1,1,0,0,0,0 },
  { 0,0,0,0,0,0,1,2,2,2,3,3,3,3,2,2,1,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,1,3,2,2,2,2,1,2,2,2,2,3,1,0,0,0,0,0,0 },
  { 0,0,0,0,1,1,3,3,3,2,1,0,1,2,3,3,3,1,1,0,0,0,0,0 },
  { 0,0,1,1,3,3,3,3,3,1,0,0,0,1,3,3,3,3,3,1,1,0,0,0 },
  { 0,1,3,3,3,3,3,3,3,1,0,0,0,1,3,3,3,3,3,3,3,1,0,0 },
  { 0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0 },
 };

int man_left [24][24]=
 {
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,1,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,1,3,3,3,1,2,2,1,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,1,3,3,3,3,3,1,1,1,1,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,1,3,3,3,3,3,1,2,2,3,1,0,0,0,0,0 },
  { 0,0,0,0,0,1,1,1,2,3,3,3,3,3,3,1,1,3,1,0,0,0,0,0 },
  { 0,0,0,1,1,2,2,1,2,3,3,4,4,4,4,3,3,4,1,0,0,0,0,0 },
  { 0,0,1,3,1,2,2,1,2,3,4,4,4,1,1,4,1,4,1,0,0,0,0,0 },
  { 0,1,3,3,3,1,2,2,1,3,4,4,4,1,1,4,1,4,1,0,1,1,1,0 },
  { 1,3,3,3,3,1,2,2,1,3,4,4,4,4,4,4,4,4,1,1,3,3,3,1 },
  { 1,3,3,3,1,0,1,2,2,1,3,4,1,1,1,1,4,1,0,1,3,3,3,1 },
  { 1,3,3,3,1,0,1,2,2,2,1,4,4,4,4,4,1,2,1,1,3,3,3,1 },
  { 0,1,1,1,0,0,1,3,2,2,2,1,1,1,1,1,2,2,2,3,3,3,1,0 },
  { 0,0,0,1,1,0,1,3,3,3,2,2,2,2,2,1,2,2,3,3,3,1,0,0 },
  { 0,0,1,3,3,1,1,3,3,3,3,3,3,2,1,0,1,2,3,3,1,0,0,0 },
  { 0,1,3,3,3,3,1,1,3,3,2,2,2,1,0,0,0,1,1,1,0,0,0,0 },
  { 1,3,3,3,3,3,2,1,1,3,2,2,2,2,1,0,0,0,0,0,0,0,0,0 },
  { 1,3,3,1,3,3,2,2,2,1,1,2,2,2,3,1,0,0,0,0,0,0,0,0 },
  { 0,1,1,1,1,3,2,2,1,0,1,3,3,3,3,1,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,1,1,1,0,0,1,3,3,3,1,1,1,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,1,3,3,3,3,3,3,3,1,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0 },
 };
															//TEE-HEE
int man_centre[24][24]=
 {
  { 0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,1,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,1,3,3,3,1,2,2,1,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,1,3,3,3,3,3,1,1,1,1,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,1,3,3,3,3,3,1,2,2,3,1,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,1,2,3,3,3,3,3,3,1,1,3,1,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,1,2,3,3,4,4,4,4,3,3,4,1,0,0,0,0,0 },
  { 0,0,0,0,0,0,1,1,2,3,4,4,4,1,1,4,1,4,1,0,0,0,0,0 },
  { 0,0,0,0,0,1,2,2,1,3,4,4,4,1,1,4,1,4,1,0,0,0,0,0 },
  { 0,0,0,0,1,2,2,2,1,3,4,4,4,4,4,4,4,4,1,0,0,0,0,0 },
  { 0,0,0,1,2,2,2,2,2,1,3,4,1,1,1,1,4,1,0,0,0,0,0,0 },
  { 0,0,0,1,2,2,2,1,2,2,1,4,4,4,4,4,1,0,0,0,0,0,0,0 },
  { 0,0,0,0,1,3,3,3,1,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0 },
  { 0,0,0,0,1,3,3,3,3,1,1,2,2,2,2,1,3,1,0,0,0,0,0,0 },
  { 0,0,0,0,0,1,3,3,1,3,3,1,2,2,1,3,3,1,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,1,3,3,3,3,1,3,1,1,1,1,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,1,3,3,1,3,1,2,1,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,1,1,2,2,1,2,1,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,1,1,2,2,2,1,1,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,1,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,1,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,1,3,3,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,1,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0 },
 };

int man_right[24][24]=
{
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,1,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,1,3,3,3,1,2,2,1,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,1,3,3,3,3,3,1,1,1,1,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,1,3,3,3,3,3,1,2,2,3,1,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,1,2,3,3,3,3,3,3,1,1,3,1,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,1,2,3,3,4,4,4,4,3,3,4,1,0,0,0,0,0 },
  { 0,0,0,0,0,1,1,1,2,3,4,4,4,1,1,4,1,4,1,0,0,0,0,0 },
  { 0,0,0,1,1,2,2,2,1,3,4,4,4,1,1,4,1,4,1,0,0,0,0,0 },
  { 0,0,1,3,3,3,2,2,2,1,4,4,4,4,4,4,4,4,1,0,0,0,0,0 },
  { 0,1,3,3,3,3,2,2,1,2,2,4,1,1,1,1,4,1,0,0,0,0,0,0 },
  { 0,1,3,3,3,1,1,1,2,2,2,2,3,4,4,4,1,1,1,0,0,0,0,0 },
  { 0,1,3,3,3,1,0,1,2,2,2,2,2,1,1,1,3,3,3,1,0,0,0,0 },
  { 0,0,1,1,1,0,1,3,2,1,3,2,2,3,3,3,3,3,3,1,0,0,0,0 },
  { 0,1,3,3,1,1,1,3,3,2,1,3,2,3,3,3,3,3,3,1,0,0,0,0 },
  { 1,3,3,3,3,1,2,3,3,3,3,1,1,1,1,1,1,1,1,0,0,0,0,0 },
  { 3,3,3,3,3,2,2,2,3,3,3,3,2,2,2,1,0,0,0,0,0,0,0,0 },
  { 3,3,1,3,3,2,2,2,1,1,1,2,2,2,3,3,1,0,0,0,0,0,0,0 },
  { 1,1,1,1,3,3,2,1,0,0,0,1,3,3,3,3,1,0,0,0,0,0,0,0 },
  { 0,0,0,0,1,1,1,0,0,0,0,1,3,3,3,1,1,1,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,1,3,3,3,3,3,3,3,1,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0 },
 };

int level[16][108]=
{
  { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
 };

int level_2[16][460]=
{
  { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
 };

int screen[16][28]=
{
  { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
  { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
 };

struct player				   //To score data of player
{
	int score;
	char name[20];
}data;

// Common functions
void shift_level()			   //To shift screen position to next
{							   //column of blocks in level
for (int j=0;j<28;j++)
	{
	for (int i=0;i<16;i++)
		{
		screen[i][j]=level_2[i][j+level_position];
		}
	}
}

void loadscreen()
{
	int x=getmaxx()/2, y=getmaxy()/2-45;
	int st[6] = {0,60,120,180,240,300}, end[6]= {300,360,60,120,180,240};
	int change_end[6] = {1,-1,1,-1,1,-1};
	int change_st[6] = {1,-1,1,-1,1,-1};
	int n = 0;

	setcolor(WHITE);
	outtextxy (x-25,y+150,"LOADING....");
	for (int i=0; i<180; i++)
	{
		setcolor(BLACK);
		arc (x,y,st[0]+change_st[0]*(n-1),end[0]+change_end[0]*(n-1),20);
		setcolor(RED);
		arc (x,y,st[0]+change_st[0]*n,end[0]+change_end[0]*n,20);

		setcolor(BLACK);
		arc (x,y,st[1]+change_st[1]*(n-1),end[1]+change_end[1]*(n-1),40);
		setcolor(WHITE);
		arc (x,y,st[1]+change_st[1]*n,end[1]+change_end[1]*n,40);

		setcolor(BLACK);
		arc (x,y,st[2]+change_st[2]*(n-1),end[2]+change_end[2]*(n-1),60);
		setcolor(RED);
		arc (x,y,st[2]+change_st[2]*n,end[2]+change_end[2]*n,60);

		setcolor(BLACK);
		arc (x,y,st[3]+change_st[3]*(n-1),end[3]+change_end[3]*(n-1),80);
		setcolor(WHITE);
		arc (x,y,st[3]+change_st[3]*n,end[3]+change_end[3]*n,80);

		setcolor(BLACK);
		arc (x,y,st[4]+change_st[4]*(n-1),end[4]+change_end[4]*(n-1),100);
		setcolor(RED);
		arc (x,y,st[4]+change_st[4]*n,end[4]+change_end[4]*n,100);

		setcolor(BLACK);
		arc (x,y,st[5]+change_st[5]*(n-1),end[5]+change_end[5]*(n-1),120);
		setcolor(WHITE);
		arc (x,y,st[5]+change_st[5]*n,end[5]+change_end[5]*n,120);

		n++;
		delay(1);
	}
}

void menu();
void display_highscores()
{
clrscr();
cleardevice();

player temp;

ifstream file;
file.open("Highscores.dat",ios::binary);

file.seekg(0,ios::end);
if (file.tellg()/sizeof(data)==0)
	{
	cout<<"No highscores set yet, play the game to set your score";
	}
else
	{
	cout<<"HIGHSCORES\n\n";
	}
file.seekg(0,ios::beg);

int count=1;
while ((file.read((char *)&temp,sizeof(temp))) && (count<=10))
	{
	cout<<count++<<". "<<temp.name<<" - "<<temp.score<<endl;
	}
getch();
file.close();
menu();
}

void input_score()
{
player temp[10];

ifstream file_read;
file_read.open("Highscores.dat",ios::binary);

file_read.seekg(0,ios::end);
int temp_size=file_read.tellg()/sizeof(data);

file_read.seekg(0,ios::beg);
int flag=1;
for (int count =0;count<(temp_size+1)&&(count<10);count++)
	{
	file_read.read((char *)&temp[count],sizeof(data));
	if ((flag)&&(data.score>temp[count].score))
		{
		temp[count+1]=temp[count];
		temp[count]=data;
		count++;
		flag=0;
		}
	}
if (temp_size<10&&flag)
	{
	temp[count+1]=data;
	}
file_read.close();
ofstream file_write;
file_write.open("Highscores.dat",ios::binary);
for (count=0;count<temp_size+1&&count<10;count++)
	{
	file_write.write((char *)&temp[count],sizeof(data));
	}



file_write.close();
}

void menu()					   		//Menu function
{
cleardevice();
int maxx=getmaxx();
int maxy=getmaxy();;
setcolor(WHITE);
rectangle(0,0,maxx,maxy);      		//Border
rectangle(2,2,maxx-2,maxy-2);

outtextxy(295,240,"WELCOME");
outtextxy(230,260,"Press any key to continue");
outtextxy(227,280,"Press h to view highscores");
outtextxy(230,300,"Press q to exit the game");
for (int i=0;i<24;i++)                           				 //Menu left facing man
	{
	for (int j=0;j<24;j++)
		{
		int x=man_menu[j][i];
		switch (x)
			{
			case 0 :putpixel(i+240,j+228,BLACK);
					break;

			case 1 :putpixel(i+240,j+228,BLACK);
					break;

			case 2 :putpixel(i+240,j+228,LIGHTBLUE);
					break;

			case 3 :putpixel(i+240,j+228,BLUE);
					break;

			case 4 :putpixel(i+240,j+228,LIGHTMAGENTA);
					break;
			}
		}
	}

for (i=23;i>=0;i--)       	   // Menu right facing man
	{
	for (int j=0;j<24;j++)
		{
		int x=man_menu[j][i];
		switch (x)
			{
			case 0: putpixel(24-i+376,j+228,BLACK);
					break;

			case 1: putpixel(24-i+376,j+228,BLACK);
					break;

			case 2: putpixel(24-i+376,j+228,LIGHTBLUE);
					break;

			case 3: putpixel(24-i+376,j+228,BLUE);
					break;

			case 4: putpixel(24-i+376,j+228,LIGHTMAGENTA);
					break;
			}
		}
	}
int temp=getch();
if (temp=='q'||temp=='Q')
	exit(0);
else if (temp=='h'||temp=='H')
	display_highscores();
}
void game_over()													//Game over menu
{
	cleardevice();
	cout<<"Your score is : " <<data.score<<setw(64);
	cout<<"\nEnter your name : "<<setw(64);
	gets(data.name);

	input_score();
	exit(1);
}

void check_game_over()											//Function to check for game over conditions
{
if (pos_x<0||pos_y<-24||pos_y>408)
	game_over();
}

void display_level()									 //"Draws" the level
{
for (int j=0;j<28;j++)
	{
	for (int i=0;i<16;i++)
		{
		int colour=screen[i][j];
		if (colour!=0)
			{
			switch(colour)
				{
				case 1: {
						setcolor(BLACK);						//Deletes previous frame's rectangles
						rectangle(24*j-12+1-grid,24*i,24*(j+1)-12+1-grid,24*(i+1));
						setcolor(BLUE);							//"Draws" new frame's rectangles
						rectangle(24*j-12-grid,24*i,24*(j+1)-12-grid,24*(i+1));
						break;
						}
				}
			}
		}
	}
if(grid==23)													//Shifts screen to new column of level
	{															//Every 24 blocks
	data.score++;
	grid=0;
	level_position++;
	shift_level();
	speed-=0.005;
	}
else
	grid++;

}


//Movement functions
//Function prototypes

void up_switch();
void down_switch();
void static_up_switch();
void static_down_switch();

void character_up();
void character_down();

void up_collide_switch();
void static_up_collide_switch();
void down_collide_switch();
void static_down_collide_switch();

void character_up()
{
char_up:

for (int pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_left[24-l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;
				}
			}
		}
	pos_y--;
	display_level();
	up_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_centre[24-l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;

				}
			}
		}
	pos_y--;
	display_level();
	up_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_right[24-l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+	pos_y,LIGHTMAGENTA);
						break;

				}
			}
		}
	pos_y--;
	display_level();
	up_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{

	for (int l=0;l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_centre[24-l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;
				}
			}
		}
	pos_y--;
	display_level();
	up_switch();
	delay(3);
	}
goto char_up;
}

void up_collide()
{
up_coll:
for (int pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_left[24-l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :
						putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :
						putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :
						putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;
				}
			}
		}
	pos_x--;
	pos_y--;
	display_level();
	up_collide_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_centre[24-l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :
						putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :
						putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;
				}
			}
		}
	pos_x--;
	pos_y--;
	display_level();
	up_collide_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_right[24-l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :
						putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :
						putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :
						putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :
						putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;
				}
			}
		}
	pos_x--;
	pos_y--;
	display_level();
	up_collide_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{

	for (int l=0;l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_centre[24-l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;
				}
			}
		}
	pos_x--;
	pos_y--;
	display_level();
	up_collide_switch();
	delay(3);
	}
goto up_coll;
}

void character_static_up()
{
char_static_up :
for (int pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_left[24-l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y+1,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y+1,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y+1,LIGHTMAGENTA);
						break;
				}
			}
		}
	display_level();
	static_up_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_centre[24-l][k];
			switch (x)
			   {
				case 0 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y+1,BLACK);     //Topi fix
						putpixel(k+pos_x,l+pos_y+1,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y+1,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y+1,LIGHTMAGENTA);
						break;

			   }
			}
		}
	display_level();
	static_up_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_right[24-l][k];
			switch (x)
			   {
				case 0 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y+1,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y+1,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y+1,LIGHTMAGENTA);
						break;

				}
			}
		}
	display_level();
	static_up_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0;l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_centre[24-l][k];
			switch (x)
			   {
				case 0 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						putpixel(k+pos_x,l+pos_y+1,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y+1,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y+1,LIGHTMAGENTA);
						break;

				}
			}
		}
	display_level();
	static_up_switch();
	delay(3);
	}
goto char_static_up;
}

void static_up_collide()
{
static_up_coll :
for (int pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_left[24-l][k];
			switch (x)
				{

				case 0 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y+1,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y+1,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y+1,LIGHTMAGENTA);
						break;
				}
			}
		}
	pos_x--;
	display_level();
	static_up_collide_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_centre[24-l][k];
			switch (x)
			   {
				case 0 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y+1,BLACK);     //Topi fix
						putpixel(k+pos_x,l+pos_y+1,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y+1,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y+1,LIGHTMAGENTA);
						break;

			   }
			}
		}
	pos_x--;
	display_level();
	static_up_collide_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_right[24-l][k];
			switch (x)
			   {
				case 0 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y+1,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y+1,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y+1,LIGHTMAGENTA);
						break;

				}
			}
		}
	pos_x--;
	display_level();
	static_up_collide_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0;l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_centre[24-l][k];
			switch (x)
			   {
				case 0 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						 putpixel(k+pos_x,l+pos_y+1,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y+1,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y+1,LIGHTMAGENTA);
						break;

				}
			}
		}
	pos_x--;
	display_level();
	static_up_collide_switch();
	delay(3);
	}
goto static_up_coll;
}

void character_down()
{
char_down :
for (int pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_left[l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;

				}
			}
		}
	pos_y++;
	display_level();
	down_switch();
	delay(3);
	}


for (pixel=0;pixel<12;pixel++)
	{

	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_centre[l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;

				}
			}
		}
	pos_y++;
	display_level();
	down_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_right[l][k];
			switch (x)
			   {
				case 0 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;

			  }
			}
		}
	pos_y++;
	display_level();
	down_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_centre[l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;

				}
			}
		}
	pos_y++;
	display_level();
	down_switch();
	delay(3);
	}
goto char_down;
	}

void down_collide()
{

down_coll :
for (int pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_left[l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;

				}
			}
		}
	pos_y++;
	pos_x--;
	display_level();
	down_collide_switch();
	delay(3);
	}


for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_centre[l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;

				}
			}
		}
	pos_y++;
	pos_x--;
	display_level();
	down_collide_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_right[l][k];
			switch (x)
			   {
				case 0 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;

			  }
			}
		}
	pos_y++;
	pos_x--;
	display_level();
	down_collide_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_centre[l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;

				}
			}
		}
	pos_y++;
	pos_x--;
	display_level();
	down_collide_switch();
	delay(3);
	}
goto down_coll;
}

void character_static_down()
{
char_static_down :
for (int pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_left[l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;

				}
			}
		}
	display_level();
	static_down_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_centre[l][k];
			switch (x)
			   {
				case 0 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y+1,BLACK);
						putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;

			   }
			}
		}
	display_level();
	static_down_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_right[l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;

			   }
			}
		}
	display_level();
	static_down_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_centre[l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;

				}
			}
		}
	display_level();
	static_down_switch();
	delay(3);
	}
goto char_static_down;
}

void static_down_collide()
{
static_down_coll :
for (int pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_left[l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;
				}
			}
		}
	pos_x--;
	display_level();
	static_down_collide_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_centre[l][k];
			switch (x)
			   {
				case 0 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;

			   }
			}
		}
	pos_x--;
	display_level();
	static_down_collide_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_right[l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;

			   }
			}
		}
	pos_x--;
	display_level();
	static_down_collide_switch();
	delay(3);
	}

for (pixel=0;pixel<12;pixel++)
	{
	for (int l=0; l<24;l++)
		{
		for (int k=0;k<24;k++)
			{
			int x=man_centre[l][k];
			switch (x)
				{
				case 0 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 1 :putpixel(k+pos_x,l+pos_y,BLACK);
						break;

				case 2 :putpixel(k+pos_x,l+pos_y,LIGHTBLUE);
						break;

				case 3 :putpixel(k+pos_x,l+pos_y,BLUE);
						break;

				case 4 :putpixel(k+pos_x,l+pos_y,LIGHTMAGENTA);
						break;

				}
			}
		}
	pos_x--;
	display_level();
	static_down_collide_switch();
	delay(3);
	}
goto static_down_coll;
	}


// Switches to check for function-switch conditions

void up_switch ()
{
	check_game_over();

	int colour_right, colour_up;
	colour_right = getpixel (pos_x+25,pos_y+12);     //mid-right
	colour_up = getpixel (pos_x+12,pos_y);     	     //mid-top

	if ( colour_right==1 )
	{
	up_collide();
	}

	if ( colour_up==1 )
	{
	character_static_up();
	}

	if (kbhit())
	getch();

	if ( getpixel(pos_x+25,pos_y)==1 && getpixel(pos_x+24,pos_y)==1 && colour_up!=1 )
	{
		character_static_up();
	}
	
	if ( getpixel(pos_x+25,pos_y)==1 && colour_up!=1 )
	{	
		up_collide();
	}
}

void up_collide_switch()
{
	check_game_over();
	int colour_right, colour_up;
	colour_right = getpixel (pos_x+25,pos_y+12);     //mid-right
	colour_up = getpixel (pos_x+12,pos_y);              //mid-top

	if ( colour_right!=1 && getpixel(pos_x+25,pos_y)==0 )
	{
	character_up();
	}

	if ( colour_up!=0 && getpixel(pos_x+25,pos_y)==1 )
	{
	static_up_collide();
	}
	if (kbhit())
	getch();
}

void static_up_switch ()
{
	check_game_over();
	int colour_right, colour_up, colour_bottom;
	colour_right = getpixel (pos_x+25,pos_y+12);     //mid-right
	colour_up = getpixel (pos_x+12,pos_y);           //mid-top
	colour_bottom = getpixel (pos_x+12,pos_y+25);	 //mid-bottom

	if ( colour_right==1 && getpixel(pos_x+25,pos_y)==1 )
	{
	static_up_collide();
	}

	if ( colour_up==0 && getpixel(pos_x+25,pos_y)==0 )
	{
	character_up();
	}

	if (kbhit())
		{
		getch();
		if (colour_bottom==0)
			{
			while (!kbhit())
				character_down();
			}
		if (colour_bottom!=0)
			{
			while (!kbhit())
				character_static_down();
			}
		}

}

void static_up_collide_switch()
{
	check_game_over();

	if (kbhit())
		{
		getch();
		while (!kbhit())
			down_collide();
		}
}

void down_switch ()
{
	check_game_over();
	int colour_right, colour_bottom;
	colour_right = getpixel (pos_x+25, pos_y+12);     //mid-right
	colour_bottom = getpixel (pos_x+12,pos_y+25);     //mid-bottom

	if ( colour_right==1 )
	{
	down_collide();
	}

	if ( colour_bottom==1 )
	{
	character_static_down();
	}
	
	if (kbhit())
		getch();

	if ( getpixel(pos_x+25,pos_y+25)==1 && getpixel(pos_x+24,pos_y+25)==1 && colour_bottom==0 )
	{
		character_static_down();
	}
	
	if ( getpixel(pos_x+25,pos_y+25)==1 && colour_bottom==0 )
	{
		down_collide();
	}	
}	

void down_collide_switch()
{
	int colour_right, colour_bottom;
	colour_right = getpixel (pos_x+25, pos_y+12);     //mid-right
	colour_bottom = getpixel (pos_x+12,pos_y+25);     //mid-bottom

	if ( colour_right!=1 && getpixel(pos_x+25,pos_y+25)==0 )
	{
	character_down();
	}

	if ( colour_bottom!=0 && getpixel(pos_x+25,pos_y+25)==1 )
	{
	static_down_collide();
	}
	if (kbhit())
		getch();
}

void static_down_switch ()
{
	check_game_over();
	int colour_right, colour_bottom,colour_top;
	colour_right = getpixel (pos_x+25,pos_y+12);     //mid-right
	colour_bottom = getpixel (pos_x+12,pos_y+25);    //mid-bottom
	colour_top = getpixel (pos_x+12,pos_y);			 //mid-top

	if ( colour_right==1 && getpixel(pos_x+25,pos_y+25)==1 )
	{
	static_down_collide();
	}

	else if ( colour_bottom==0 && getpixel(pos_x+25,pos_y+25)==0 )
	{
	character_down();
	}

	if (kbhit())
		{
		getch();
		if (colour_top==0)
			{
			while (!kbhit())
				character_up();
			}
		if (colour_top!=0)
			{
			while (!kbhit())
				character_static_up();
			}
		}

}

void static_down_collide_switch()
{
	check_game_over();
	if (kbhit())
		{
		getch();
		while (!kbhit())
			up_collide();
		}

}


void main()
{
clrscr();

int gd=DETECT,gm;
//initgraph(&gd,&gm,"C:\\TC\\BGI");
initgraph(&gd,&gm,"C:\\TurboC3\\BGI");

loadscreen();
menu();


cleardevice();
setbkcolor(BLACK);

character_down();

}

